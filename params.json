{"name":"TLC","tagline":"A compiler for the Teal programming language","body":"# TLC - A compiler for the Teal programming language\r\n\r\n(Work in progress...)\r\n\r\n## What is Teal?\r\nTeal is a modern statically typed programming language with type inference, structural typing, and algebraic data types.\r\n\r\n### Declarations\r\n```\r\nlet a: int // a will refer to an int, once assigned this a will always refer to that same int\r\nvar b: int // b will refer to an int, b's reference may be updated to refer to a different int\r\nvar c:= 7 // c refers to an int with the value of 7\r\nlet d:= mutable<int>(7)\r\n```\r\n\r\n### Type Inference\r\nThe rules are simple: anywhere you might declare a type, you also have the option of not declaring a type. If the compiler can figure out something that'd work from context, great. Otherwise there will be a compilation error.\r\n\r\n\r\n### Types:\r\n* Int - an integer type\r\n* Number - a double precision floating point numbers\r\n* Bool - an enum with two levels: {true, false}\r\n* Bit - an enum with two levels: {on, off}\r\n* Byte - an 8-tuple of bits\r\n* Unit - a type with only one value\r\n* Procedure - a function that may have side effects\r\n\r\n\r\n### Algebraic Data Types\r\n* Record - think c \"struct\", each member has a name\r\n* Tuple - like a Record, but members are ordered and names are optional\r\n* Option - a tagged-union, each variant has a name\r\n\r\n### Collections\r\n* Map - a collection of (key, value) pairs, where keys must be unique\r\n* Sequence - an ordered collection with zero or more elements\r\n\r\n\r\n### Procedures\r\nProcedures take zero or more named values as arguments, and produce a single value as their result. Calling a procedure may have side effects. Procedures with only one argument can be called without naming that argument.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}